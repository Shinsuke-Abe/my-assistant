# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: my-assistant
plugins:
  - serverless-dynamodb-local
  - serverless-aws-documentation
  - serverless-step-functions
  - serverless-python-requirements
custom:
  accountId: ${env:ACCOUNT_ID}
  clientGenrateFunction: "arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:distribute-developers-assets-dev-distribute_client"
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  pythonRequirements:
    zip: true
  documentation:
    version: '1'
    summary: 'My assistant intelligence API'
    description: 'アシスタント知性体(を目指す)API'
    resources:
      - path: 'my-assistant/life_log'
        description: 'ライフログをアシスタントに登録します。'
    models:
      - name: "CreateLifeLogRequest"
        description: "ライフログを作成する時のリクエスト"
        contentType: "application/json"
        schema: "${file(models/create_life_log_request.json)}"
      - name: "LifeLog"
        description: "ライフログのモデル"
        contentType: "application/json"
        schema: "${file(models/lie_log.json)}"


# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
#  stage: dev
  region: ap-northeast-1
  environment:
    LIFE_EVENT_TABLENAME: "lifeEvent_${opt:stage, self:provider.stage}"
    SWAGGER_FILE_BUCKET: ${opt:stage, self:provider.stage}-${self:service}-swagger-file
    COGNITO_POOL_ID: "${env:COGNITO_POOL_ID}"
    COGNITO_POOL_CLIENT_ID: "${env:COGNITO_POOL_CLIENT_ID}"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LIFE_EVENT_TABLENAME}"
    - Effect: "Allow"
      Resource: "arn:aws:s3:::${self:provider.environment.SWAGGER_FILE_BUCKET}"
      Action:
        - "s3:*"
    - Effect: "Allow"
      Resource: "arn:aws:s3:::${self:provider.environment.SWAGGER_FILE_BUCKET}/*"
      Action:
        - "s3:*"
    - Effect: "Allow"
      Resource:
        - "arn:aws:apigateway:${opt:region, self:provider.region}::/restapis/*"
        - "arn:aws:apigateway:${opt:region, self:provider.region}::/restapis"
      Action:
        - "apigateway:GET"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
#  include:
#    - include-me.py
#    - include-me-dir/**
 exclude:
   - test/**
   - readme.md
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello:
    handler: apps/handler.hello
  sign_up:
    handler: infra/user_management.sign_up
  confirm_sign_up:
    handler: infra/user_management.confirm
  sign_in:
    handler: infra/user_management.sign_in
  refresh_token:
    handler: infra/user_management.refresh_token
  generate_swagger:
    handler: infra/gen_dev_assets.generate_swagger
    environment:
      REST_API_NAME: ${opt:stage, self:provider.stage}-${self:service}
      REST_API_STAGE_NAME: ${opt:stage, self:provider.stage}
  auth:
    handler: apps/life_log.auth
  create_life_log:
    handler: apps/life_log.create_life_log
    environment:
      REQUEST_MODEL_SCHEMA: "models/create_life_log_request.json"
    events:
      - http:
          path: my-assistant/life_log
          method: post
          authorizer: auth
          documentation:
            summary: "create life log"
            description: "ライフログを作成します。"
            requestBody:
              description: "ライフログの作成要求"
            requestModels:
              "application/json": "CreateLifeLogRequest"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "作成完了結果"
                responseModels:
                  "application/json": "LifeLog"

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources: "${file(config/resources.yml)}"

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

stepFunctions:
  stateMachines:
    myAssistantGenerateClient:
      definition:
        Comment: "Swaggerファイルの生成に成功したら、各言語向けにライブラリを生成する。"
        StartAt: "SetServiceName"
        States:
          SetServiceName:
            Comment: "サービス名の設定"
            Type: "Pass"
            Result: ${self:service}
            ResultPath: "$.serviceName"
            Next: "GenerateSwaggerFile"
          GenerateSwaggerFile:
            Type: "Task"
            Comment: "Swaggerファイルの生成"
            Resource: "arn:aws:lambda:${opt:region, self:provider.region}:251689627483:function:${self:service}-${opt:stage, self:provider.stage}-generate_swagger"
            Catch:
              - ErrorEquals:
                - "UnhandledError"
                Next: "GenerateErrorFallback"
            ResultPath: "$.swaggerUrl"
            Next: "GenerateClientParallel"
          GenerateErrorFallback:
               Type: "Pass"
               Result: "This is a fallback from a generate swagger file Lambda function exception"
               End: true
          GenerateClientParallel:
            Type: "Parallel"
            End: true
            Branches:
              - StartAt: "SetLanguageJava"
                States:
                  SetLanguageJava:
                    Comment: "言語設定にJavaを追加する"
                    Type: "Pass"
                    Result: "java"
                    ResultPath: "$.language"
                    Next: "GenerateClientJava"
                  GenerateClientJava:
                    # Type: "Task"
                    # Resource: ${self:custom.clientGenrateFunction}
                    Type: "Pass"
                    Result: "java generated"
                    InputPath: "$"
                    OutputPath: "$"
                    End: true
              - StartAt: "SetLanguageRuby"
                States:
                  SetLanguageRuby:
                    Comment: "言語設定にRubyを追加する"
                    Type: "Pass"
                    Result: "ruby"
                    ResultPath: "$.language"
                    Next: "GenerateClientRuby"
                  GenerateClientRuby:
                    # Type: "Task"
                    # Resource: ${self:custom.clientGenrateFunction}
                    Type: "Pass"
                    Result: "ruby generated"
                    InputPath: "$"
                    OutputPath: "$"
                    End: true
              - StartAt: "SetLanguageJavascript"
                States:
                  SetLanguageJavascript:
                    Comment: "言語設定にJavaScriptを追加する"
                    Type: "Pass"
                    Result: "javascript"
                    ResultPath: "$.language"
                    Next: "GenerateClientJavaScript"
                  GenerateClientJavaScript:
                    # Type: "Task"
                    # Resource: ${self:custom.clientGenrateFunction}
                    Type: "Pass"
                    Result: "javascript generated"
                    InputPath: "$"
                    OutputPath: "$"
                    End: true
              - StartAt: "SetLanguageScala"
                States:
                  SetLanguageScala:
                    Comment: "言語設定にScalaを追加する"
                    Type: "Pass"
                    Result: "scala"
                    ResultPath: "$.language"
                    Next: "GenerateClientScala"
                  GenerateClientScala:
                    # Type: "Task"
                    # Resource: ${self:custom.clientGenrateFunction}
                    Type: "Pass"
                    Result: "scala generated"
                    InputPath: "$"
                    OutputPath: "$"
                    End: true
